apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "{{  .Chart.Name }}-deployment"
  labels:
    chart: '{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}'
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  template:
    metadata:
      labels:
        app: "{{  .Chart.Name }}-selector"
        version: "current"
    spec:
      imagePullSecrets:
      - name: {{ .Values.image.pullSecret }}
      containers:
      - name: "{{  .Chart.Name  }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 20
        resources:
          requests:
            cpu: "{{ .Values.image.resources.requests.cpu }}"
            memory: "{{ .Values.image.resources.requests.memory }}"
        env:
          - name: PORT
            value: "{{ .Values.service.servicePort }}"
          - name: APPLICATION_NAME
            value: "{{ .Chart.Name }}"
          - name: TRUSTSTORE_PWD
            value: "{{ .Values.java.truststore.pwd }}"
          - name: JKS_LOCATION
            value: "$JAVA_HOME/jre/lib/security/cacerts"
          - name: KAFKA_ENV
            value: "{{ .Values.eventstreams.env }}"
          - name: KAFKA_BROKERS
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.eventstreams.brokersConfigMap }}"
                key: brokers
          {{if or (eq .Values.eventstreams.env "IBMCLOUD") (eq .Values.eventstreams.env "ICP")}}
          - name: KAFKA_APIKEY
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.eventstreams.apikeyConfigMap }}"
                key: binding
          - name: POSTGRESQL_CA_PEM
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.postgresql.capemSecret }}"
                key: binding
          {{end}}
          - name: POSTGRESQL_URL
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.postgresql.urlSecret }}"
                key: binding
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.postgresql.userSecret }}"
                key: binding
          - name: POSTGRESQL_PWD
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.postgresql.passwordSecret }}"
                key: binding
