apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "containerkstreams.fullname" . }}
  labels:
    app: {{ template "containerkstreams.name" . }}
    chart: {{ template "containerkstreams.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: {{ template "containerkstreams.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "containerkstreams.name" . }}
        release: {{ .Release.Name }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.service.servicePort }}
            initialDelaySeconds: 20
          resources:
            requests:
              cpu: "{{ .Values.image.resources.requests.cpu }}"
              memory: "{{ .Values.image.resources.requests.memory }}"
          env:
            - name: PORT
              value: "{{ .Values.service.servicePort }}"
            - name: APPLICATION_NAME
              value: "{{ .Release.Name }}"
            - name: KAFKA_ENV
              value: "{{ .Values.eventstreams.env }}"
            - name: KAFKA_BROKERS
              value: "{{ .Values.eventstreams.brokers }}"
            - name: KAFKA_APIKEY
              valueFrom: 
                secretKeyRef:
                  name: eventstreams-apikey
                  key: binding
